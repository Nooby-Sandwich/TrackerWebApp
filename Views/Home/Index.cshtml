@model TrackerWebApp.Models.DashboardViewModel
@using TrackerWebApp.Models
@{
    ViewData["Title"] = "Financial Dashboard";
    var T = Model.Totals;
    var budgets = ViewBag.Budgets as List<Budget> ?? new();
    var C = Model.ChartData;
}

<div class="container-fluid px-4">

    <!-- Top Metric Cards -->
    <div class="row g-4 mb-5">
        @* Total Budgeted *@
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="text-uppercase text-muted">Budgeted</h6>
                    <h3>@T.TotalBudgeted.ToString("C")</h3>
                </div>
            </div>
        </div>

        @* Total Spent *@
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="text-uppercase text-muted">Spent</h6>
                    <h3>@T.TotalSpent.ToString("C")</h3>
                </div>
            </div>
        </div>

        @* Budgets Count *@
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="text-uppercase text-muted">Budgets</h6>
                    <h3>@T.TotalBudgets</h3>
                </div>
            </div>
        </div>

        @* Expenses Count *@
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="text-uppercase text-muted">Transactions</h6>
                    <h3>@T.TotalExpenses</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick-Add Widgets -->
    <div class="row g-4 mb-5">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>Quick-Add Expense</h5>
                    <form asp-controller="Expenses" asp-action="Create" method="post" class="row g-2">
                        <div class="col-5">
                            <input name="Description" class="form-control" placeholder="Description" required />
                        </div>
                        <div class="col-3">
                            <select name="BudgetId" class="form-select" required>
                                <option value="">Category</option>
                                @foreach (var b in budgets)
                                {
                                    <option value="@b.BudgetId">@b.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-2">
                            <input name="Amount" type="number" step="0.01" class="form-control" placeholder="Amt" required />
                        </div>
                        <div class="col-2 text-end">
                            <button class="btn btn-success">Add</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>Quick-Add Budget</h5>
                    <form asp-controller="Budgets" asp-action="Create" method="post" class="row g-2">
                        <div class="col-8">
                            <input name="Name" class="form-control" placeholder="Category" required />
                        </div>
                        <div class="col-2">
                            <input name="Limit" type="number" step="0.01" class="form-control" placeholder="Limit" required />
                        </div>
                        <div class="col-2 text-end">
                            <button class="btn btn-primary">Add</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Grid (2×2) -->
    <div class="row g-4 mb-5">
        <!-- 1) Budget vs Spent -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>Budget vs Spent</h5>
                    <canvas id="chart1"></canvas>
                </div>
            </div>
        </div>

        <!-- 2) Spending by Category -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>By Category</h5>
                    <canvas id="chart2"></canvas>
                </div>
            </div>
        </div>

        <!-- 3) Monthly Trend -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>Monthly Trend</h5>
                    <canvas id="chart3"></canvas>
                </div>
            </div>
        </div>

        <!-- 4) Top Categories -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5>Top Categories</h5>
                    <canvas id="chart4"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded',()=>{
          // 1) Budget vs Spent
          new Chart(document.getElementById('chart1'), {
            type: 'bar',
            data: {
              labels: ['Budgeted','Spent'],
              datasets:[{
                label:'$',
                data:[@T.TotalBudgeted,@T.TotalSpent],
                backgroundColor:['#4e73df','#e74a3b']
              }]
            },
            options:{scales:{y:{beginAtZero:true}}}
          });

          // 2) By Category (Pie)
          new Chart(document.getElementById('chart2'), {
            type:'pie',
            data:{
              labels: @Html.Raw(Json.Serialize(C.ByCategory.Select(c => c.Category))),
              datasets:[{
                data: @Html.Raw(Json.Serialize(C.ByCategory.Select(c => c.Total))),
                backgroundColor:['#1cc88a','#36b9cc','#f6c23e','#e74a3b','#858796']
              }]
            }
          });

          // 3) Monthly Trend (Line)
          new Chart(document.getElementById('chart3'), {
            type:'line',
            data:{
              labels: @Html.Raw(Json.Serialize(C.MonthlyTrend.Select(m => $"{m.Month}/{m.Year}"))),
              datasets:[{
                label:'Spend',
                data: @Html.Raw(Json.Serialize(C.MonthlyTrend.Select(m => m.Total))),
                fill:false, borderColor:'#4e73df', tension:0.3
              }]
            }
          });

          // 4) Top Categories (HBar)
          const top = C.ByCategory
            .sort((a,b)=>b.Total - a.Total).slice(0,5);
          new Chart(document.getElementById('chart4'), {
            type:'bar',
            data:{
              labels: top.map(x=>x.Category),
              datasets:[{
                label:'Amount',
                data: top.map(x=>x.Total),
                backgroundColor:'#f6c23e'
              }]
            },
            options:{ indexAxis:'y',scales:{x:{beginAtZero:true}} }
          });
        });
    </script>
}
